{"version":3,"sources":["../../../src/commons/yawp.js"],"names":[],"mappings":"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","file":"yawp.js","sourcesContent":["import { extend } from './utils';\n\nlet baseUrl = '/api';\nlet defaultFetchOptions = {};\n\nfunction normalize(arg) {\n    if (!arg) {\n        return '';\n    }\n    if (arg instanceof Object) {\n        return extractId(arg);\n    }\n    return arg;\n}\n\nfunction hasId(object) {\n    return object.id;\n}\n\nfunction extractId(object) {\n    if (hasId(object)) {\n        return object.id;\n    }\n    throw 'use yawp(id) if your endpoint does not have a @Id field called id';\n}\n\nexport default (request) => {\n\n    function yawpFn(baseArg) {\n\n        let options = {};\n        let q = {};\n\n        class Yawp {\n\n            constructor(props) {\n                if (props) {\n                    extend(this, props);\n                }\n            }\n\n            // request\n\n            static clear() {\n                options = {\n                    url: normalize(baseArg)\n                };\n            }\n\n            static prepareRequestOptions() {\n                let _options = extend({}, options);\n                Yawp.clear();\n                return _options;\n            }\n\n            static baseRequest(type) {\n                let options = Yawp.prepareRequestOptions();\n\n                let url = baseUrl + options.url;\n                delete options.url;\n\n                options.method = type;\n                options.json = true;\n                extend(options, defaultFetchOptions);\n\n                //console.log('request', url, options);\n\n                return request(url, options);\n            }\n\n            static wrapInstance(object) {\n                return new this(object);\n            }\n\n            static wrapArray(objects) {\n                return objects.map((object) => this.wrapInstance(object));\n            }\n\n            // query\n\n            static from(parentBaseArg) {\n                let parentBase = normalize(parentBaseArg);\n                options.url = parentBase + options.url;\n                return this;\n            }\n\n            static transform(t) {\n                Yawp.param('t', t);\n                return this;\n            }\n\n            static where(data) {\n                if (arguments.length === 1) {\n                    q.where = data;\n                } else {\n                    q.where = [].slice.call(arguments);\n                }\n                return this;\n            }\n\n            static order(data) {\n                q.order = data;\n                return this;\n            }\n\n            static sort(data) {\n                q.sort = data;\n                return this;\n            }\n\n            static limit(data) {\n                q.limit = data;\n                return this;\n            }\n\n            static fetch(arg) {\n                let cb = typeof arg === 'function' ? arg : undefined;\n\n                if (arg && !cb) {\n                    options.url += '/' + arg;\n                }\n\n                let promise = Yawp.baseRequest('GET').then((object) => {\n                    return this.wrapInstance(object);\n                });\n\n                if (cb) {\n                    return promise.then(cb);\n                }\n\n                return promise;\n            }\n\n            static setupQuery() {\n                if (Object.keys(q).length > 0) {\n                    Yawp.param('q', JSON.stringify(q));\n                }\n            }\n\n            static list(cb) {\n                Yawp.setupQuery();\n\n                let promise = Yawp.baseRequest('GET').then((objects) => {\n                    return this.wrapArray(objects);\n                });\n\n                if (cb) {\n                    return promise.then(cb);\n                }\n                return promise;\n            }\n\n            static first(cb) {\n                Yawp.limit(1);\n\n                return Yawp.list((objects) => {\n                    let object = objects.length === 0 ? null : objects[0];\n                    return cb ? cb(object) : object;\n                });\n            }\n\n            static only(cb) {\n                return Yawp.list((objects) => {\n                    if (objects.length !== 1) {\n                        throw 'called only but got ' + objects.length + ' results';\n                    }\n                    let object = objects[0];\n                    return cb ? cb(object) : object;\n                });\n            }\n\n            // repository\n\n            static create(object) {\n                options.body = JSON.stringify(object);\n                return Yawp.baseRequest('POST');\n            }\n\n            static update(object) {\n                options.body = JSON.stringify(object);\n                return Yawp.baseRequest('PUT');\n            }\n\n            static patch(object) {\n                options.body = JSON.stringify(object);\n                return Yawp.baseRequest('PATCH');\n            }\n\n            static destroy() {\n                return Yawp.baseRequest('DELETE');\n            }\n\n            // actions\n\n            static json(object) {\n                options.body = JSON.stringify(object);\n                return this;\n            }\n\n            static params(params) {\n                options.query = extend(options.query, params);\n                return this;\n            }\n\n            static param(key, value) {\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[key] = value;\n            }\n\n            static action(verb, path) {\n                options.url += '/' + path;\n                return Yawp.baseRequest(verb);\n            }\n\n            static get(action) {\n                return Yawp.action('GET', action);\n            }\n\n            static put(action) {\n                return Yawp.action('PUT', action);\n            }\n\n            static _patch(action) {\n                return Yawp.action('PATCH', action);\n            }\n\n            static post(action) {\n                return Yawp.action('POST', action);\n            }\n\n            static _delete(action) {\n                return Yawp.action('DELETE', action);\n            }\n\n            // es5 subclassing\n\n            static subclass(constructorFn) {\n                let base = yawpFn(baseArg);\n                let sub = class extends base {\n                    constructor() {\n                        super();\n                        Yawp.bindBaseMethods(this, base);\n                        if (constructorFn) {\n                            constructorFn.apply(this, arguments);\n                        } else {\n                            super.constructor.apply(this, arguments);\n                        }\n                    }\n                };\n                sub.super = base;\n                return sub;\n            }\n\n            static bindBaseMethods(self, base) {\n                self.super = () => {\n                };\n                var keys = Object.getOwnPropertyNames(base.prototype);\n                for (let i = 0, l = keys.length; i < l; i++) {\n                    let key = keys[i];\n                    self.super[key] = base.prototype[key].bind(self);\n                }\n            }\n\n            // instance method\n\n            save(cb) {\n                let promise = this.createOrUpdate();\n                return cb ? promise.then(cb) : promise;\n            }\n\n            createOrUpdate() {\n                let promise;\n                if (hasId(this)) {\n                    options.url = this.id;\n                    promise = Yawp.update(this);\n                } else {\n                    promise = Yawp.create(this).then((object) => {\n                        this.id = object.id;\n                        return object;\n                    });\n                }\n                return promise;\n            }\n\n            destroy(cb) {\n                options.url = extractId(this);\n                let promise = Yawp.destroy();\n                return cb ? promise.then(cb) : promise;\n            }\n\n            get(action) {\n                options.url = extractId(this);\n                return Yawp.get(action);\n            }\n\n            put(action) {\n                options.url = extractId(this);\n                return Yawp.put(action);\n            }\n\n            _patch(action) {\n                options.url = extractId(this);\n                return Yawp._patch(action);\n            }\n\n            post(action) {\n                options.url = extractId(this);\n                return Yawp.post(action);\n            }\n\n            _delete(action) {\n                options.url = extractId(this);\n                return Yawp._delete(action);\n            }\n        }\n\n        Yawp.clear();\n        return Yawp;\n    }\n\n    // base api\n\n    function config(cb) {\n        let c = {\n            baseUrl: (url) => {\n                baseUrl = url;\n            },\n            defaultFetchOptions: (options) => {\n                defaultFetchOptions = options;\n            }\n        };\n        cb(c);\n    };\n\n    function update(object) {\n        let id = extractId(object);\n        return yawpFn(id).update(object);\n    }\n\n    function patch(object) {\n        let id = extractId(object);\n        return yawpFn(id).patch(object);\n    }\n\n    function destroy(object) {\n        let id = extractId(object);\n        return yawpFn(id).destroy(object);\n    }\n\n    let baseApi = {\n        config,\n        update,\n        patch,\n        destroy\n    }\n\n    return extend(yawpFn, baseApi);\n}"]}